{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Parquet10",
						"type": "DatasetReference"
					},
					"name": "AzureSQLCountryParquet"
				},
				{
					"dataset": {
						"referenceName": "Parquet11",
						"type": "DatasetReference"
					},
					"name": "SQLVMCountryParquet"
				},
				{
					"dataset": {
						"referenceName": "Parquet12",
						"type": "DatasetReference"
					},
					"name": "SQLVMDates"
				},
				{
					"dataset": {
						"referenceName": "Parquet13",
						"type": "DatasetReference"
					},
					"name": "AzureSQLDates"
				},
				{
					"dataset": {
						"referenceName": "Parquet14",
						"type": "DatasetReference"
					},
					"name": "SQLVMMetrics"
				},
				{
					"dataset": {
						"referenceName": "Parquet15",
						"type": "DatasetReference"
					},
					"name": "AzureSQLMetrics"
				},
				{
					"dataset": {
						"referenceName": "Json3",
						"type": "DatasetReference"
					},
					"name": "Cosmos"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Parquet16",
						"type": "DatasetReference"
					},
					"name": "GeographySink"
				},
				{
					"dataset": {
						"referenceName": "Parquet19",
						"type": "DatasetReference"
					},
					"name": "DeathsSink"
				},
				{
					"dataset": {
						"referenceName": "Parquet20",
						"type": "DatasetReference"
					},
					"name": "CasesSink"
				},
				{
					"dataset": {
						"referenceName": "Parquet21",
						"type": "DatasetReference"
					},
					"name": "RecoveriesSink"
				},
				{
					"dataset": {
						"referenceName": "Parquet22",
						"type": "DatasetReference"
					},
					"name": "PoliciesSink"
				},
				{
					"dataset": {
						"referenceName": "Parquet23",
						"type": "DatasetReference"
					},
					"name": "DateSink"
				}
			],
			"transformations": [
				{
					"name": "union1"
				},
				{
					"name": "Geography"
				},
				{
					"name": "union3"
				},
				{
					"name": "union4"
				},
				{
					"name": "join1"
				},
				{
					"name": "join2"
				},
				{
					"name": "join3"
				},
				{
					"name": "Cast",
					"description": "Transform from string to date"
				},
				{
					"name": "Date"
				},
				{
					"name": "Cases"
				},
				{
					"name": "Policies"
				},
				{
					"name": "Recoveries"
				},
				{
					"name": "Deaths"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Country as string,",
				"          CountryCode as string,",
				"          Latitude as decimal(10,5),",
				"          Longitude as decimal(10,5)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> AzureSQLCountryParquet",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> SQLVMCountryParquet",
				"source(output(",
				"          DateKey as integer,",
				"          FullDate as date,",
				"          isWeekDay as boolean,",
				"          DayOfWeek as integer,",
				"          DayOfMonth as integer,",
				"          DayOfQuarter as integer,",
				"          DayOfYear as integer,",
				"          DayName as string,",
				"          WeekOfYear as integer,",
				"          WeekName as string,",
				"          MonthOfYear as integer,",
				"          MonthName as string,",
				"          CalendarQuarter as integer,",
				"          CalendarQuarterName as string,",
				"          CalendarYear as integer,",
				"          FiscalMonth as integer,",
				"          FiscalMonthName as string,",
				"          FiscalQuarter as integer,",
				"          FiscalQuarterName as string,",
				"          FiscalYear as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> SQLVMDates",
				"source(output(",
				"          DateKey as integer,",
				"          FullDate as date,",
				"          isWeekDay as boolean,",
				"          DayOfWeek as integer,",
				"          DayOfMonth as integer,",
				"          DayOfQuarter as integer,",
				"          DayOfYear as integer,",
				"          DayName as string,",
				"          WeekOfYear as integer,",
				"          WeekName as string,",
				"          MonthOfYear as integer,",
				"          MonthName as string,",
				"          CalendarQuarter as integer,",
				"          CalendarQuarterName as string,",
				"          CalendarYear as integer,",
				"          FiscalMonth as integer,",
				"          FiscalMonthName as string,",
				"          FiscalQuarter as integer,",
				"          FiscalQuarterName as string,",
				"          FiscalYear as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> AzureSQLDates",
				"source(output(",
				"          ID as integer,",
				"          Updated as date,",
				"          Confirmed as integer,",
				"          Confirmed_Change as integer,",
				"          Deaths as integer,",
				"          Deaths_Change as integer,",
				"          Recovered as integer,",
				"          Recovered_Change as integer,",
				"          Latitude as decimal(10,5),",
				"          Longitude as decimal(10,5),",
				"          ISO2 as string,",
				"          ISO3 as string,",
				"          Country_Region as string,",
				"          load_time as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> SQLVMMetrics",
				"source(output(",
				"          ID as integer,",
				"          Updated as date,",
				"          Confirmed as integer,",
				"          Confirmed_Change as integer,",
				"          Deaths as integer,",
				"          Deaths_Change as integer,",
				"          Recovered as integer,",
				"          Recovered_Change as integer,",
				"          Latitude as decimal(10,5),",
				"          Longitude as decimal(10,5),",
				"          ISO2 as string,",
				"          ISO3 as string,",
				"          Country_Region as string,",
				"          load_time as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> AzureSQLMetrics",
				"source(output(",
				"          CountryName as string,",
				"          CountryCode as string,",
				"          RegionName as string,",
				"          RegionCode as string,",
				"          Jurisdiction as string,",
				"          Date as string,",
				"          {C1_School closing} as integer,",
				"          C1_Flag as integer,",
				"          {C2_Workplace closing} as integer,",
				"          C2_Flag as integer,",
				"          {C3_Cancel public events} as integer,",
				"          C3_Flag as integer,",
				"          {C4_Restrictions on gatherings} as integer,",
				"          C4_Flag as integer,",
				"          {C5_Close public transport} as integer,",
				"          C5_Flag as integer,",
				"          {C6_Stay at home requirements} as integer,",
				"          C6_Flag as integer,",
				"          {C7_Restrictions on internal movement} as integer,",
				"          C7_Flag as integer,",
				"          {C8_International travel controls} as integer,",
				"          {E1_Income support} as integer,",
				"          E1_Flag as integer,",
				"          {E2_Debt contract relief} as integer,",
				"          {E3_Fiscal measures} as integer,",
				"          {E4_International support} as integer,",
				"          {H1_Public information campaigns} as integer,",
				"          H1_Flag as integer,",
				"          {H2_Testing policy} as integer,",
				"          {H3_Contact tracing} as integer,",
				"          {H4_Emergency investment in healthcare} as integer,",
				"          {H5_Investment in vaccines} as integer,",
				"          {H6_Facial Coverings} as integer,",
				"          H6_Flag as integer,",
				"          {H7_Vaccination policy} as integer,",
				"          H7_Flag as integer,",
				"          {H8_Protection of elderly people} as integer,",
				"          H8_Flag as integer,",
				"          M1_Wildcard as integer,",
				"          StringencyIndex as integer,",
				"          StringencyIndexForDisplay as integer,",
				"          StringencyLegacyIndex as integer,",
				"          StringencyLegacyIndexForDisplay as integer,",
				"          GovernmentResponseIndex as integer,",
				"          GovernmentResponseIndexForDisplay as integer,",
				"          ContainmentHealthIndex as integer,",
				"          ContainmentHealthIndexForDisplay as integer,",
				"          EconomicSupportIndex as integer,",
				"          EconomicSupportIndexForDisplay as integer,",
				"          id as string,",
				"          {_rid} as string,",
				"          {_self} as string,",
				"          {_etag} as string,",
				"          {_attachments} as string,",
				"          {_ts} as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine') ~> Cosmos",
				"AzureSQLCountryParquet, SQLVMCountryParquet union(byName: true)~> union1",
				"join2 select(mapColumn(",
				"          Country,",
				"          CountryCode,",
				"          Latitude = union1@Latitude,",
				"          Longitude = union1@Longitude",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> Geography",
				"SQLVMMetrics, AzureSQLMetrics union(byName: true)~> union3",
				"SQLVMDates, AzureSQLDates union(byName: true)~> union4",
				"union1, union3 join(Country == Country_Region,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1, union4 join(Updated == FullDate,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join2",
				"join2, Cast join(Country == CountryName,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join3",
				"Cosmos cast(output(",
				"          Date as date 'yyyy-MM-dd'",
				"     ),",
				"     errors: true) ~> Cast",
				"join3 select(mapColumn(",
				"          DayOfMonth,",
				"          MonthName,",
				"          CalendarYear,",
				"          CalendarQuarter,",
				"          DayOfYear",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> Date",
				"join3 select(mapColumn(",
				"          CountryName,",
				"          Confirmed,",
				"          Confirmed_Change,",
				"          Latitude = union3@Latitude,",
				"          Latitude = union1@Longitude,",
				"          DayOfMonth,",
				"          MonthName,",
				"          CalendarYear",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> Cases",
				"join3 select(mapColumn(",
				"          CountryName,",
				"          Longitude = union3@Longitude,",
				"          Latitude = union3@Latitude",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> Policies",
				"join3 select(mapColumn(",
				"          CountryName,",
				"          Recovered,",
				"          Recovered_Change,",
				"          Longitude = union3@Longitude,",
				"          Latitude = union1@Latitude,",
				"          CalendarYear,",
				"          MonthName,",
				"          DayOfMonth",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> Recoveries",
				"join3 select(mapColumn(",
				"          ID = union3@ID,",
				"          Deaths,",
				"          Deaths_Change,",
				"          Country = CountryName,",
				"          Longitude = union3@Longitude,",
				"          Latitude = union3@Latitude,",
				"          DayOfMonth,",
				"          MonthName,",
				"          CalendarYear",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> Deaths",
				"Geography sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> GeographySink",
				"Deaths sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> DeathsSink",
				"Cases sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> CasesSink",
				"Recoveries sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RecoveriesSink",
				"Policies sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> PoliciesSink",
				"Date sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> DateSink"
			]
		}
	}
}